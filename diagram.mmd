classDiagram
    class Person {
        +Long id
        +String firstName
        +String lastName
        +String email
        +String phoneNumber
        +String address
        +PersonRole personRole
        +List~Order~ orders
    }

    class PersonRole {
        <<enumeration>>
        CUSTOMER
        CONSULTANT
    }

    class Order {
        +Long id
        +String fromAddress
        +String toAddress
        +ServiceType serviceType
        +LocalDate startDate
        +LocalDate endDate
        +String note
        +OrderStatus status
        +Person person
    }

    class ServiceType {
        <<enumeration>>
        MOVING
        PACKING
        CLEANING
    }

    class OrderStatus {
        <<enumeration>>
        PENDING
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }

    class PersonRepository
    class PersonService
    class PersonController
    class OrderRepository
    class OrderService
    class OrderController

%% Layer flow
    PersonService --> PersonRepository : uses
    PersonController --> PersonService : delegates
    PersonRepository --> Person : persists
    Person --> PersonRole : has

    OrderService --> OrderRepository : uses
    OrderController --> OrderService : delegates
    OrderRepository --> Order : persists
    Order --> ServiceType : has
    Order --> OrderStatus : has

%% Precise relations
    Person "1" --> "*" Order : places
    Order "*" --> "1" Person : belongs to

%%Explicación de cambios
%%Agregamos Person "1" --> "*" Order : places
%% Y también Order "*" --> "1" Person : belongs to
%%Para mostrar la relación bidireccional OneToMany / ManyToOne
%%Mantenemos todas las capas (Controller → Service → Repository → Model)
%%Usamos etiquetas ("1" y "*"), como indica la documentación oficial de Mermaid