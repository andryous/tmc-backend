classDiagram
    class Person {
        +Long id
        +String firstName
        +String lastName
        +String email
        +String phoneNumber
        +String address
        +PersonRole personRole
        +List~Order~ orders
    }

    class PersonRole {
        <<enumeration>>
        CUSTOMER
        CONSULTANT
    }

    class Order {
        +Long id
        +String fromAddress
        +String toAddress
        +ServiceType serviceType
        +LocalDate startDate
        +LocalDate endDate
        +String note
        +OrderStatus status
        +Person customer
        +Person consultant
    }

    class ServiceType {
        <<enumeration>>
        MOVING
        PACKING
        CLEANING
    }

    class OrderStatus {
        <<enumeration>>
        PENDING
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }

    class PersonRepository
    class PersonService
    class PersonController
    class OrderRepository
    class OrderService
    class OrderController

%% Layer flow
    PersonService --> PersonRepository : uses
    PersonController --> PersonService : delegates
    PersonRepository --> Person : persists
    Person --> PersonRole : has

    OrderService --> OrderRepository : uses
    OrderController --> OrderService : delegates
    OrderRepository --> Order : persists
    Order --> ServiceType : has
    Order --> OrderStatus : has

%% Precise relations
    Person "1" --> "*" Order : places (as customer)
    Person "1" --> "*" Order : consults (as consultant)
    Order "*" --> "1" Person : customer
    Order "*" --> "1" Person : consultant

%% Explicación de cambios
%% Añadimos los roles customer y consultant en Order con relaciones separadas
%% Actualizamos las relaciones bidireccionales para mostrar ambas asociaciones
%% Conservamos la arquitectura por capas (Controller → Service → Repository → Model)
